import cron from "node-cron";
import CartModel from "../models/CartModel.js";
import CartStoreModel from "../models/CartStoreModel.js";
import { applyPromotionsToItems } from "../utils/calculateCart.js";

cron.schedule("* * * * *", async () => { // ch·∫°y m·ªói ph√∫t
  console.log("üïí Running promotion expiration check...");
  const now = new Date();

  try {
    // 1Ô∏è‚É£ T√¨m cart v√† cartStore c√≥ khuy·∫øn m√£i ƒë√£ h·∫øt h·∫°n
    const [expiredCarts, expiredStores] = await Promise.all([
      CartModel.find({
        promotion: { $ne: null },
        promotionExpiresAt: { $lt: now }
      }).select("_id"),
      CartStoreModel.find({
        promotion: { $ne: null },
        promotionExpiresAt: { $lt: now }
      }).select("_id cart_id")
    ]);

    // 2Ô∏è‚É£ X√≥a promotion ƒë√£ h·∫øt h·∫°n (song song)
    const updateOps = [
      ...expiredCarts.map(c =>
        CartModel.updateOne(
          { _id: c._id },
          { $set: { promotion: null, promotionExpiresAt: null } }
        )
      ),
      ...expiredStores.map(s =>
        CartStoreModel.updateOne(
          { _id: s._id },
          { $set: { promotion: null, promotionExpiresAt: null } }
        )
      )
    ];
    await Promise.all(updateOps);

    // 3Ô∏è‚É£ Gom c√°c cart b·ªã ·∫£nh h∆∞·ªüng
    const affectedCartIds = new Set([
      ...expiredCarts.map(c => c._id.toString()),
      ...expiredStores.map(s => s.cart_id.toString())
    ]);

    // 4Ô∏è‚É£ Ch·ªâ t√≠nh l·∫°i m·ªói cart 1 l·∫ßn
    for (const cartId of affectedCartIds) {
      await applyPromotionsToItems(cartId);
    }

    console.log(
      `‚úÖ Promotion expiration check done: ${affectedCartIds.size} cart(s) updated.`
    );
  } catch (err) {
    console.error("‚ùå Error in promotion cron:", err);
  }
});
